// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/evt/rest-api-example/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// FileRepo is an autogenerated mock type for the FileRepo type
type FileRepo struct {
	mock.Mock
}

// CreateFile provides a mock function with given fields: _a0, _a1
func (_m *FileRepo) CreateFile(_a0 context.Context, _a1 *model.DBFile) (*model.DBFile, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.DBFile
	if rf, ok := ret.Get(0).(func(context.Context, *model.DBFile) *model.DBFile); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DBFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.DBFile) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFile provides a mock function with given fields: _a0, _a1
func (_m *FileRepo) DeleteFile(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFile provides a mock function with given fields: _a0, _a1
func (_m *FileRepo) GetFile(_a0 context.Context, _a1 uuid.UUID) (*model.DBFile, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.DBFile
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.DBFile); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DBFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFile provides a mock function with given fields: _a0, _a1
func (_m *FileRepo) UpdateFile(_a0 context.Context, _a1 *model.DBFile) (*model.DBFile, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.DBFile
	if rf, ok := ret.Get(0).(func(context.Context, *model.DBFile) *model.DBFile); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DBFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.DBFile) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
